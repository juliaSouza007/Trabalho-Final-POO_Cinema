Index: Cinema/src/main/java/org/teiacoltec/poo/Main.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package org.teiacoltec.poo;\r\n\r\nimport org.teiacoltec.poo.Classes.*;\r\nimport org.teiacoltec.poo.ClassesDAO.*;\r\nimport org.teiacoltec.poo.conexao.FalhaConexaoException;\r\n\r\nimport java.util.ArrayList;\r\nimport java.util.List;\r\n\r\npublic class Main {\r\n\r\n    public static void main(String[] args) throws FalhaConexaoException {\r\n        Cinema cineart = Cineart.obtemInstancia();\r\n        Cinema cinemark = Cinemark.obtemInstancia();\r\n        Cinema cinepolis = Cinepolis.obtemInstancia();\r\n        Cinema cinesercla = Cinesercla.obtemInstancia();\r\n\r\n        List<Cinema> cinemasBD = CinemaDAO.carregar(Cinema.obtemListaCinemas());\r\n\r\n        for (Cinema cinema : cinemasBD) {\r\n            System.out.println(\"Nome: \" + cinema.getNome());\r\n        }\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Cinema/src/main/java/org/teiacoltec/poo/Main.java b/Cinema/src/main/java/org/teiacoltec/poo/Main.java
--- a/Cinema/src/main/java/org/teiacoltec/poo/Main.java	(revision 5d457233bd839ed54636d3bcd8406af8cf0dbe80)
+++ b/Cinema/src/main/java/org/teiacoltec/poo/Main.java	(date 1732486979783)
@@ -4,12 +4,14 @@
 import org.teiacoltec.poo.ClassesDAO.*;
 import org.teiacoltec.poo.conexao.FalhaConexaoException;
 
-import java.util.ArrayList;
 import java.util.List;
+import java.util.Scanner;
 
 public class Main {
 
     public static void main(String[] args) throws FalhaConexaoException {
+        Scanner scanner = new Scanner(System.in);
+
         Cinema cineart = Cineart.obtemInstancia();
         Cinema cinemark = Cinemark.obtemInstancia();
         Cinema cinepolis = Cinepolis.obtemInstancia();
@@ -20,5 +22,111 @@
         for (Cinema cinema : cinemasBD) {
             System.out.println("Nome: " + cinema.getNome());
         }
+
+        int opcao;
+
+        do {
+            System.out.println("===== MENU CINEMA =====");
+            System.out.println("1. Comprar ingresso");
+            System.out.println("2. Listar sessões de um filme");
+            System.out.println("0. Sair");
+            System.out.print("Escolha uma opção: ");
+
+            while (!scanner.hasNextInt()) {
+                System.out.println("Por favor, insira um número válido!");
+                scanner.next();
+            }
+            opcao = scanner.nextInt();
+
+            switch (opcao) {
+                case 1:
+                    comprarIngresso(scanner);
+                    break;
+                case 2:
+                    listarSessoesFilme(scanner);
+                    break;
+                case 0:
+                    System.out.println("Encerrando o programa...");
+                    break;
+                default:
+                    System.out.println("Opção inválida! Tente novamente.");
+            }
+        } while (opcao != 0);
+
+        scanner.close();
+    }
+
+    //Método para comprar ingresso, listando filmes disponíveis e registrando a compra.
+    private static void comprarIngresso(Scanner scanner) {
+        System.out.println("==== FILMES DISPONÍVEIS ====");
+        List<Filmes> filmes = Filmes.obtemListaFilmes();
+        for (Filmes filme : filmes) {
+            System.out.println("ID: " + filme.getId() + " | Nome: " + filme.getNome());
+        }
+
+        System.out.print("Digite o ID do filme que deseja comprar ingresso: ");
+        int idFilme;
+        while (!scanner.hasNextInt()) {
+            System.out.println("Por favor, insira um número válido!");
+            scanner.next();
+        }
+        idFilme = scanner.nextInt();
+
+        Filmes filmeEscolhido = null;
+        for (Filmes filme : filmes) {
+            if (filme.getId() == idFilme) {
+                filmeEscolhido = filme;
+                break;
+            }
+        }
+
+        if (filmeEscolhido != null) {
+            System.out.println("Você escolheu o filme: " + filmeEscolhido.getNome());
+            Vendas.registrarVenda(filmeEscolhido);
+            System.out.println("Compra registrada com sucesso!");
+        } else {
+            System.out.println("Filme não encontrado. Tente novamente.");
+        }
+    }
+
+    /**
+     * Lista as sessões disponíveis de um filme escolhido pelo usuário.
+     */
+    private static void listarSessoesFilme(Scanner scanner) {
+        System.out.println("==== FILMES DISPONÍVEIS ====");
+        List<Filmes> filmes = Filmes.obtemListaFilmes();
+        for (Filmes filme : filmes) {
+            System.out.println("ID: " + filme.getId() + " | Nome: " + filme.getNome());
+        }
+
+        System.out.print("Digite o ID do filme para ver as sessões disponíveis: ");
+        int idFilme;
+        while (!scanner.hasNextInt()) {
+            System.out.println("Por favor, insira um número válido!");
+            scanner.next();
+        }
+        idFilme = scanner.nextInt();
+
+        Filmes filmeEscolhido = null;
+        for (Filmes filme : filmes) {
+            if (filme.getId() == idFilme) {
+                filmeEscolhido = filme;
+                break;
+            }
+        }
+
+        if (filmeEscolhido != null) {
+            System.out.println("==== SESSÕES DISPONÍVEIS ====");
+            List<Sessao> sessoes = filmeEscolhido.getSessoes();
+            if (sessoes.isEmpty()) {
+                System.out.println("Nenhuma sessão disponível para este filme.");
+            } else {
+                for (Sessao sessao : sessoes) {
+                    System.out.println("Sessão: " + sessao.getHorario() + " | Sala: " + sessao.getSala());
+                }
+            }
+        } else {
+            System.out.println("Filme não encontrado. Tente novamente.");
+        }
     }
 }
Index: Cinema/src/main/java/org/teiacoltec/poo/ClassesDAO/CinemaDAO.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package org.teiacoltec.poo.ClassesDAO;\r\n\r\nimport org.teiacoltec.poo.Classes.Cinema;\r\nimport org.teiacoltec.poo.conexao.Conexao;\r\nimport org.teiacoltec.poo.conexao.FalhaConexaoException;\r\n\r\nimport java.lang.reflect.Array;\r\nimport java.sql.*;\r\nimport java.util.ArrayList;\r\nimport java.util.List;\r\n\r\npublic class CinemaDAO implements ICinemaDAO {\r\n    private static final int ID_POSICAO_TABELA = 1;\r\n    private static final int NOME_POSICAO_TABELA = 2;\r\n    private static final int LOCAL_POSICAO_TABELA = 3;\r\n\r\n    private static final String NOME_TABELA = \"Cinema\";\r\n\r\n    static final int DUPLICATE_KEY_ERROR_CODE = 1062;\r\n\r\n    public static void criaTabela() throws FalhaConexaoException {\r\n        try {\r\n            // Estabelece conexao\r\n            Connection conexao = Conexao.obtemConexao();\r\n\r\n            // Faz a consulta\r\n            Statement stmt = conexao.createStatement();\r\n            stmt.execute(\"CREATE SCHEMA IF NOT EXISTS `coltec` DEFAULT CHARACTER SET utf8;\");\r\n            stmt.execute(\"CREATE TABLE IF NOT EXISTS `coltec`.`Cinema` (\" +\r\n                    \"`id` INT NOT NULL,\" +\r\n                    \"`nome` VARCHAR(255) NOT NULL,\" +\r\n                    \"`local` VARCHAR(255) NOT NULL,\" +\r\n                    \"PRIMARY KEY (`id`)) ENGINE = InnoDB;\");\r\n        } catch (SQLException e) {\r\n            throw new Error(e.getMessage());\r\n        }\r\n    }\r\n\r\n    public static void insere(Cinema cinema) throws IdExistenteException, FalhaConexaoException {\r\n\r\n        try {\r\n            // Estabelecer conexao\r\n            Connection conexao = Conexao.obtemConexao();\r\n\r\n            // Faço a consulta\r\n            PreparedStatement stmt = conexao.prepareStatement(\"INSERT INTO \" + NOME_TABELA + \" VALUES(?,?,?);\");\r\n            stmt.setInt(1, cinema.getId());\r\n            stmt.setString(2, cinema.getNome());\r\n            stmt.setString(3, cinema.getLocal());\r\n            stmt.execute();\r\n\r\n        } catch (SQLException e) {\r\n            if (e.getErrorCode() == DUPLICATE_KEY_ERROR_CODE) throw new IdExistenteException(cinema.getId());\r\n            throw new Error(e.getMessage());\r\n        }\r\n    }\r\n\r\n    public static String[] obtemCinema(int id) throws CinemaNaoEncontradaException, FalhaConexaoException {\r\n\r\n        try {\r\n            // Estabelecer conexao\r\n            Connection conexao = Conexao.obtemConexao();\r\n\r\n            // Faço a consulta\r\n            Statement stmt = conexao.createStatement();\r\n            ResultSet resultado = stmt.executeQuery(\"SELECT * from \" + NOME_TABELA + \" WHERE id = \" + id + \";\");\r\n\r\n            if (resultado.next()) {\r\n                // Obtenho os dados\r\n                String[] resul = new String[3];\r\n\r\n                resul[0] = String.valueOf(resultado.getInt(ID_POSICAO_TABELA));\r\n                resul[1] = resultado.getString(NOME_POSICAO_TABELA);\r\n                resul[2] = resultado.getString(LOCAL_POSICAO_TABELA);\r\n\r\n                return resul;\r\n            }\r\n\r\n            // Se chegou aqui é porque não tem agencia com esse numero\r\n            throw new CinemaNaoEncontradaException(id);\r\n        } catch (SQLException e) {\r\n            throw new Error(e.getMessage());\r\n        }\r\n    }\r\n\r\n    public static void atualiza(Cinema cinema) throws CinemaNaoEncontradaException, FalhaConexaoException {\r\n\r\n        try {\r\n            // Estabelecer conexao\r\n            Connection conexao = Conexao.obtemConexao();\r\n\r\n            // Faço a consulta\r\n            PreparedStatement stmt = conexao.prepareStatement(\"UPDATE \" + NOME_TABELA + \" SET nome = ?, local = ? WHERE id = ?;\");\r\n            stmt.setString(1, cinema.getNome());\r\n            stmt.setString(2, cinema.getLocal());\r\n            stmt.setInt(3, cinema.getId());\r\n\r\n            // Verifica a quantidade de registros alterados\r\n            int nLinhasAlteradas = stmt.executeUpdate();\r\n\r\n            // Se não alterou nenhuma linha é porque não tem cinema com esse id\r\n            if (nLinhasAlteradas == 0) throw new CinemaNaoEncontradaException(cinema.getId());\r\n\r\n        } catch (SQLException e) {\r\n            throw new Error(e.getMessage());\r\n        }\r\n    }\r\n\r\n    public static void remove(Cinema cinema) throws CinemaNaoEncontradaException, FalhaConexaoException {\r\n\r\n        try {\r\n            // Estabelecer conexao\r\n            Connection conexao = Conexao.obtemConexao();\r\n\r\n            // Faço a consulta\r\n            PreparedStatement stmt = conexao.prepareStatement(\"DELETE FROM \" + NOME_TABELA + \" WHERE id = ?;\");\r\n            stmt.setInt(1, cinema.getId());\r\n\r\n            // Verifica a quantidade de registros alterados\r\n            int nLinhasAlteradas = stmt.executeUpdate();\r\n\r\n            // Se não alterou nenhuma linha é porque não tem cinema com esse id\r\n            if (nLinhasAlteradas == 0) throw new CinemaNaoEncontradaException(cinema.getId());\r\n\r\n        } catch (SQLException e) {\r\n            throw new Error(e.getMessage());\r\n        }\r\n    }\r\n\r\n    public static void salvar(List<Cinema> lista) throws FalhaConexaoException {\r\n\r\n        for (Cinema cinema : lista) {\r\n            try {\r\n                insere(cinema);\r\n            } catch (IdExistenteException e) {\r\n                try {\r\n                    // Verifica se é o mesmo cinema que já está no bd\r\n                    String[] resul = obtemCinema(cinema.getId());\r\n                    if (cinema.getId() == Integer.valueOf(resul[0]) &&\r\n                            cinema.getNome().equals(resul[1]) &&\r\n                            cinema.getLocal().equals(resul[2])) {\r\n\r\n                        // Não adiciona o cinema no bd\r\n                    } else {\r\n                        // Se tiver o mesmo id, mas informações diferentes, atualiza o cinema\r\n                        atualiza(cinema);\r\n                    }\r\n                } catch (CinemaNaoEncontradaException f) {\r\n                    throw new Error(f.getMessage());\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    public static List<Cinema> carregar(List<Cinema> cinemas) throws FalhaConexaoException {\r\n\r\n        try {\r\n            // Estabelece conexao\r\n            Connection conexao = Conexao.obtemConexao();\r\n\r\n            // Faço a consulta\r\n            Statement stmt = conexao.createStatement();\r\n            ResultSet resultado = stmt.executeQuery(\"SELECT * from \" + NOME_TABELA + \" ORDER BY id;\");\r\n\r\n            // Crio a lista\r\n            List<Cinema> lista = new ArrayList<Cinema>();\r\n\r\n            while (resultado.next()) {\r\n                for (Cinema cinema : cinemas) {\r\n                    // Se o nome do cinema no banco for igual ao nome do cinema no sistema, adiciona na lista\r\n                    if (resultado.getString(NOME_POSICAO_TABELA).equals(cinema.getNome())) {\r\n                        lista.add(cinema.obtemCinema());\r\n                    }\r\n                }\r\n            }\r\n\r\n            // Retorna a lista preenchida\r\n            return lista;\r\n\r\n        } catch (SQLException e) {\r\n            throw new Error(e.getMessage());\r\n        }\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Cinema/src/main/java/org/teiacoltec/poo/ClassesDAO/CinemaDAO.java b/Cinema/src/main/java/org/teiacoltec/poo/ClassesDAO/CinemaDAO.java
--- a/Cinema/src/main/java/org/teiacoltec/poo/ClassesDAO/CinemaDAO.java	(revision 5d457233bd839ed54636d3bcd8406af8cf0dbe80)
+++ b/Cinema/src/main/java/org/teiacoltec/poo/ClassesDAO/CinemaDAO.java	(date 1732485906810)
@@ -4,7 +4,6 @@
 import org.teiacoltec.poo.conexao.Conexao;
 import org.teiacoltec.poo.conexao.FalhaConexaoException;
 
-import java.lang.reflect.Array;
 import java.sql.*;
 import java.util.ArrayList;
 import java.util.List;
@@ -55,7 +54,7 @@
         }
     }
 
-    public static String[] obtemCinema(int id) throws CinemaNaoEncontradaException, FalhaConexaoException {
+    public static Cinema obtemCinema(int id) throws CinemaNaoEncontradaException, FalhaConexaoException {
 
         try {
             // Estabelecer conexao
Index: Cinema/src/main/java/org/teiacoltec/poo/Classes/Filmes.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package org.teicoltec.poo.Classes;\r\n\r\nimport org.teicoltec.poo.conexao.Conexao;\r\nimport org.teicoltec.poo.ClassesDAO.FilmesDAO;\r\nimport java.util.ArrayList;\r\n\r\npublic class Filmes {\r\n   \r\n    private int id;\r\n    private int duracao_s;\r\n    private String nome;\r\n   \r\n    public Filmes(int id, int duracao_s ,String nome) {\r\n        \r\n        this.id = id;\r\n        this.duracao_s = duracao_s;\r\n        this.nome = nome;\r\n    }\r\n\r\n    public int getId() {\r\n        return id;\r\n    }\r\n\r\n    public void setId(int id) {\r\n        this.id = id;\r\n    }\r\n\r\n     public long getDuracao_s() {\r\n        return duracao_s;\r\n    }\r\n\r\n    public void setDuracao_s(long duracao_s) {\r\n        this.duracao_s = duracao_s;\r\n    }\r\n\r\n    public String getNome() {\r\n        return nome;\r\n    }\r\n\r\n    public void setNome(String nome) {\r\n        this.nome = nome;\r\n    }\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Cinema/src/main/java/org/teiacoltec/poo/Classes/Filmes.java b/Cinema/src/main/java/org/teiacoltec/poo/Classes/Filmes.java
--- a/Cinema/src/main/java/org/teiacoltec/poo/Classes/Filmes.java	(revision 5d457233bd839ed54636d3bcd8406af8cf0dbe80)
+++ b/Cinema/src/main/java/org/teiacoltec/poo/Classes/Filmes.java	(date 1732484980632)
@@ -1,16 +1,16 @@
-package org.teicoltec.poo.Classes;
+package org.teiacoltec.poo.Classes;
 
-import org.teicoltec.poo.conexao.Conexao;
-import org.teicoltec.poo.ClassesDAO.FilmesDAO;
+import org.teiacoltec.poo.conexao.Conexao;
+import org.teiacoltec.poo.ClassesDAO.FilmesDAO;
 import java.util.ArrayList;
 
 public class Filmes {
    
     private int id;
-    private int duracao_s;
+    private long duracao_s;
     private String nome;
    
-    public Filmes(int id, int duracao_s ,String nome) {
+    public Filmes(int id, long duracao_s ,String nome) {
         
         this.id = id;
         this.duracao_s = duracao_s;
Index: Cinema/src/main/java/org/teiacoltec/poo/ClassesDAO/FilmesDAO.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package org.teicoltec.poo.ClassesDAO;\r\n\r\nimport org.teicoltec.poo.conexao.Conexao;\r\nimport org.teicoltec.poo.Classes.Filme;\r\nimport org.teiacoltec.poo.conexao.FalhaConexaoException;\r\nimport java.sql.*;\r\nimport java.util.ArrayList;\r\n\r\npublic abstract class FilmesDAO {\r\n\r\n    public static void criaTabela() throws FalhaConexaoException {\r\n        try {\r\n            // Estabelece conexao\r\n            Connection conexao = Conexao.obtemConexao();\r\n\r\n            // Faz a consulta\r\n            Statement stmt = conexao.createStatement();\r\n            stmt.execute(\"CREATE SCHEMA IF NOT EXISTS `coltec` DEFAULT CHARACTER SET utf8;\");\r\n            stmt.execute(\"CREATE TABLE IF NOT EXISTS `coltec`.`Filmes` (\" +\r\n                    \"`id` INT NOT NULL,\" +\r\n                    \"`nome` VARCHAR(255) NOT NULL,\" +\r\n                    \"`duracao_s` VARCHAR(255) NOT NULL,\" +\r\n                    \"PRIMARY KEY (`id`)) ENGINE = InnoDB;\");\r\n        } catch (SQLException e) {\r\n            throw new Error(e.getMessage());\r\n        }\r\n    }\r\n\r\n\r\n\r\n    public Filme insere(Filme filme) {\r\n        String sql = \"INSERT INTO Filmes (id, nome, duracao_s) VALUES (?, ?, ?)\";\r\n\r\n        try (Connection conn = Conexao.obtemConexao();\r\n             PreparedStatement stmt = conn.prepareStatement(sql)) {\r\n\r\n            stmt.setInt(1, filme.getId());\r\n            stmt.setString(2, filme.getNome());\r\n            stmt.setInt(3, filme.getDuracao_s());\r\n            stmt.executeUpdate();\r\n\r\n            return filme;\r\n        } catch (SQLException e) {\r\n            System.err.println(\"Erro ao inserir filme: \" + e.getMessage());\r\n            return null;\r\n        }\r\n    }\r\n\r\n    public Filme buscarFilme(int id) {\r\n\r\n        String sql = \"SELECT * FROM Filmes WHERE id = ?\";\r\n        try (Connection conn = Conexao.obtemConexao();\r\n             PreparedStatement stmt = conn.prepareStatement(sql)) {\r\n\r\n            stmt.setInt(1, id);\r\n            ResultSet rs = stmt.executeQuery();\r\n\r\n            if (rs.next()) {\r\n                return new Filme(rs.getInt(\"id\"), rs.getString(\"nome\"), rs.getLong(\"duracao_s\"));\r\n            }\r\n        } catch (SQLException e) {\r\n            System.err.println(\"Erro ao buscar filme: \" + e.getMessage());\r\n        }\r\n        return null;\r\n    }\r\n\r\n    public ArrayList<Filme> buscarFilmes() {\r\n\r\n        String sql = \"SELECT * FROM Filmes\";\r\n        ArrayList<Filme> filmes = new ArrayList<>();\r\n        try (Connection conn = Conexao.obtemConexao();\r\n             Statement stmt = conn.createStatement();\r\n             ResultSet rs = stmt.executeQuery(sql)) {\r\n\r\n            while (rs.next()) {\r\n                filmes.add(new Filme(rs.getInt(\"id\"), rs.getString(\"nome\"), rs.getLong(\"duracao_s\")));\r\n            }\r\n\r\n        } catch (SQLException e) {\r\n            System.err.println(\"Erro ao buscar filmes: \" + e.getMessage());\r\n        }\r\n        return filmes;\r\n    }\r\n\r\n    public void atualiza(Filme filme) {\r\n\r\n        String sql = \"UPDATE Filmes SET nome = ?, duracao_s = ? WHERE id = ?\";\r\n\r\n        try (Connection conn = Conexao.obtemConexao();\r\n             PreparedStatement stmt = conn.prepareStatement(sql)) {\r\n\r\n            stmt.setString(1, filme.getNome());\r\n            stmt.setLong(2, filme.getDuracao_s());\r\n            stmt.setInt(3, filme.getId());\r\n            stmt.executeUpdate();\r\n\r\n        } catch (SQLException e) {\r\n            System.err.println(\"Erro ao atualizar filme: \" + e.getMessage());\r\n        }\r\n    }\r\n\r\n    public void remove(Filme filme) {\r\n        String sql = \"DELETE FROM Filmes WHERE id = ?\";\r\n\r\n        try (Connection conn = Conexao.obtemConexao();\r\n             PreparedStatement stmt = conn.prepareStatement(sql)) {\r\n\r\n            stmt.setInt(1, filme.getId());\r\n            stmt.executeUpdate();\r\n\r\n        } catch (SQLException e) {\r\n            System.err.println(\"Erro ao remover filme: \" + e.getMessage());\r\n        }\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Cinema/src/main/java/org/teiacoltec/poo/ClassesDAO/FilmesDAO.java b/Cinema/src/main/java/org/teiacoltec/poo/ClassesDAO/FilmesDAO.java
--- a/Cinema/src/main/java/org/teiacoltec/poo/ClassesDAO/FilmesDAO.java	(revision 5d457233bd839ed54636d3bcd8406af8cf0dbe80)
+++ b/Cinema/src/main/java/org/teiacoltec/poo/ClassesDAO/FilmesDAO.java	(date 1732485501621)
@@ -1,7 +1,7 @@
-package org.teicoltec.poo.ClassesDAO;
+package org.teiacoltec.poo.ClassesDAO;
 
-import org.teicoltec.poo.conexao.Conexao;
-import org.teicoltec.poo.Classes.Filme;
+import org.teiacoltec.poo.conexao.Conexao;
+import org.teiacoltec.poo.Classes.Filmes;
 import org.teiacoltec.poo.conexao.FalhaConexaoException;
 import java.sql.*;
 import java.util.ArrayList;
@@ -28,7 +28,7 @@
 
 
 
-    public Filme insere(Filme filme) {
+    public Filmes insere(Filmes filme) {
         String sql = "INSERT INTO Filmes (id, nome, duracao_s) VALUES (?, ?, ?)";
 
         try (Connection conn = Conexao.obtemConexao();
@@ -36,17 +36,17 @@
 
             stmt.setInt(1, filme.getId());
             stmt.setString(2, filme.getNome());
-            stmt.setInt(3, filme.getDuracao_s());
+            stmt.setLong(3, filme.getDuracao_s());
             stmt.executeUpdate();
 
             return filme;
-        } catch (SQLException e) {
+        } catch (SQLException | FalhaConexaoException e) {
             System.err.println("Erro ao inserir filme: " + e.getMessage());
             return null;
         }
     }
 
-    public Filme buscarFilme(int id) {
+    public Filmes buscarFilme(int id) {
 
         String sql = "SELECT * FROM Filmes WHERE id = ?";
         try (Connection conn = Conexao.obtemConexao();
@@ -56,33 +56,33 @@
             ResultSet rs = stmt.executeQuery();
 
             if (rs.next()) {
-                return new Filme(rs.getInt("id"), rs.getString("nome"), rs.getLong("duracao_s"));
+                return new Filmes(rs.getInt("id"), rs.getLong("duracao_s"), rs.getString("nome"));
             }
-        } catch (SQLException e) {
+        } catch (SQLException | FalhaConexaoException e) {
             System.err.println("Erro ao buscar filme: " + e.getMessage());
         }
         return null;
     }
 
-    public ArrayList<Filme> buscarFilmes() {
+    public ArrayList<Filmes> buscarFilmes() {
 
         String sql = "SELECT * FROM Filmes";
-        ArrayList<Filme> filmes = new ArrayList<>();
+        ArrayList<Filmes> filmes = new ArrayList<>();
         try (Connection conn = Conexao.obtemConexao();
              Statement stmt = conn.createStatement();
              ResultSet rs = stmt.executeQuery(sql)) {
 
             while (rs.next()) {
-                filmes.add(new Filme(rs.getInt("id"), rs.getString("nome"), rs.getLong("duracao_s")));
+                filmes.add(new Filmes(rs.getInt("id"), rs.getLong("duracao_s"), rs.getString("nome")));
             }
 
-        } catch (SQLException e) {
+        } catch (SQLException | FalhaConexaoException e) {
             System.err.println("Erro ao buscar filmes: " + e.getMessage());
         }
         return filmes;
     }
 
-    public void atualiza(Filme filme) {
+    public void atualiza(Filmes filme) {
 
         String sql = "UPDATE Filmes SET nome = ?, duracao_s = ? WHERE id = ?";
 
@@ -94,12 +94,12 @@
             stmt.setInt(3, filme.getId());
             stmt.executeUpdate();
 
-        } catch (SQLException e) {
+        } catch (SQLException | FalhaConexaoException e) {
             System.err.println("Erro ao atualizar filme: " + e.getMessage());
         }
     }
 
-    public void remove(Filme filme) {
+    public void remove(Filmes filme) {
         String sql = "DELETE FROM Filmes WHERE id = ?";
 
         try (Connection conn = Conexao.obtemConexao();
@@ -108,7 +108,7 @@
             stmt.setInt(1, filme.getId());
             stmt.executeUpdate();
 
-        } catch (SQLException e) {
+        } catch (SQLException | FalhaConexaoException e) {
             System.err.println("Erro ao remover filme: " + e.getMessage());
         }
     }
Index: Cinema/src/main/java/org/teiacoltec/poo/ClassesDAO/SessaoDAO.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package org.teiacoltec.poo.ClassesDAO;\r\n\r\nimport org.teiacoltec.poo.conexao.Conexao;\r\nimport org.teiacoltec.poo.Classes.Filme;\r\nimport org.teiacoltec.poo.Classes.Sala;\r\nimport org.teiacoltec.poo.Classes.Sessao;\r\n\r\nimport java.sql.*;\r\nimport java.util.ArrayList;\r\nimport java.util.Date;\r\n\r\npublic class SessaoDAO {\r\n\r\n    // Método para salvar uma sessão\r\n    public Sessao salvarSessao(Sessao sessao) {\r\n        String sql = \"INSERT INTO sessoes (nomeSala, idFilme, dataSessao) VALUES (?, ?, ?)\";\r\n\r\n        try (Connection conn = Conexao.obtemConexao();\r\n             PreparedStatement stmt = conn.prepareStatement(sql, Statement.RETURN_GENERATED_KEYS)) {\r\n\r\n            stmt.setString(1, sessao.getSalaAssociada().getNome());\r\n            stmt.setInt(2, sessao.getFilmeExibido().getId());\r\n            stmt.setTimestamp(3, new Timestamp(sessao.getDataSessao().getTime()));\r\n            stmt.executeUpdate();\r\n\r\n            ResultSet rs = stmt.getGeneratedKeys();\r\n            if (rs.next()) {\r\n                sessao.setId(rs.getInt(1));\r\n            }\r\n            return sessao;\r\n        } catch (SQLException e) {\r\n            System.err.println(\"Erro ao salvar sessão: \" + e.getMessage());\r\n            return null;\r\n        }\r\n    }\r\n\r\n    // Método para buscar todas as sessões\r\n    public ArrayList<Sessao> buscarTodasSessoes() {\r\n        String sql = \"SELECT * FROM sessoes\";\r\n        ArrayList<Sessao> sessoes = new ArrayList<>();\r\n\r\n        try (Connection conn = Conexao.obtemConexao();\r\n             Statement stmt = conn.createStatement();\r\n             ResultSet rs = stmt.executeQuery(sql)) {\r\n\r\n            while (rs.next()) {\r\n                Sala salaAssociada = new Sala(rs.getString(\"nomeSala\"), 0); // Capacidade não disponível diretamente\r\n                Filme filmeExibido = new Filme(rs.getInt(\"idFilme\"), \"Placeholder\", 0); // Detalhes adicionais devem ser buscados\r\n                Date dataSessao = new Date(rs.getTimestamp(\"dataSessao\").getTime());\r\n                sessoes.add(new Sessao(rs.getInt(\"id\"), salaAssociada, filmeExibido, dataSessao));\r\n            }\r\n        } catch (SQLException e) {\r\n            System.err.println(\"Erro ao buscar todas as sessões: \" + e.getMessage());\r\n        }\r\n        return sessoes;\r\n    }\r\n\r\n    // Método para buscar sessões por filme\r\n    public ArrayList<Sessao> buscarSessoesPorFilme(Filme filme) {\r\n        String sql = \"SELECT * FROM sessoes WHERE idFilme = ?\";\r\n        ArrayList<Sessao> sessoes = new ArrayList<>();\r\n\r\n        try (Connection conn = Conexao.obtemConexao();\r\n             PreparedStatement stmt = conn.prepareStatement(sql)) {\r\n\r\n            stmt.setInt(1, filme.getId());\r\n            ResultSet rs = stmt.executeQuery();\r\n\r\n            while (rs.next()) {\r\n                Sala salaAssociada = new Sala(rs.getString(\"nomeSala\"), 0); // Capacidade não disponível diretamente\r\n                Date dataSessao = new Date(rs.getTimestamp(\"dataSessao\").getTime());\r\n                sessoes.add(new Sessao(rs.getInt(\"id\"), salaAssociada, filme, dataSessao));\r\n            }\r\n        } catch (SQLException e) {\r\n            System.err.println(\"Erro ao buscar sessões por filme: \" + e.getMessage());\r\n        }\r\n        return sessoes;\r\n    }\r\n\r\n    // Método para atualizar uma sessão\r\n    public void atualizarSessao(Sessao sessao) {\r\n        String sql = \"UPDATE sessoes SET nomeSala = ?, idFilme = ?, dataSessao = ? WHERE id = ?\";\r\n\r\n        try (Connection conn = Conexao.obtemConexao();\r\n             PreparedStatement stmt = conn.prepareStatement(sql)) {\r\n\r\n            stmt.setString(1, sessao.getSalaAssociada().getNome());\r\n            stmt.setInt(2, sessao.getFilmeExibido().getId());\r\n            stmt.setTimestamp(3, new Timestamp(sessao.getDataSessao().getTime()));\r\n            stmt.setInt(4, sessao.getId());\r\n            stmt.executeUpdate();\r\n\r\n        } catch (SQLException e) {\r\n            System.err.println(\"Erro ao atualizar sessão: \" + e.getMessage());\r\n        }\r\n    }\r\n\r\n    // Método para deletar uma sessão\r\n    public void deletarSessao(Sessao sessao) {\r\n        String sql = \"DELETE FROM sessoes WHERE id = ?\";\r\n\r\n        try (Connection conn = Conexao.obtemConexao();\r\n             PreparedStatement stmt = conn.prepareStatement(sql)) {\r\n\r\n            stmt.setInt(1, sessao.getId());\r\n            stmt.executeUpdate();\r\n\r\n        } catch (SQLException e) {\r\n            System.err.println(\"Erro ao deletar sessão: \" + e.getMessage());\r\n        }\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Cinema/src/main/java/org/teiacoltec/poo/ClassesDAO/SessaoDAO.java b/Cinema/src/main/java/org/teiacoltec/poo/ClassesDAO/SessaoDAO.java
--- a/Cinema/src/main/java/org/teiacoltec/poo/ClassesDAO/SessaoDAO.java	(revision 5d457233bd839ed54636d3bcd8406af8cf0dbe80)
+++ b/Cinema/src/main/java/org/teiacoltec/poo/ClassesDAO/SessaoDAO.java	(date 1732488166774)
@@ -1,9 +1,10 @@
 package org.teiacoltec.poo.ClassesDAO;
 
+import org.teiacoltec.poo.Classes.Filmes;
 import org.teiacoltec.poo.conexao.Conexao;
-import org.teiacoltec.poo.Classes.Filme;
 import org.teiacoltec.poo.Classes.Sala;
 import org.teiacoltec.poo.Classes.Sessao;
+import org.teiacoltec.poo.conexao.FalhaConexaoException;
 
 import java.sql.*;
 import java.util.ArrayList;
@@ -11,8 +12,28 @@
 
 public class SessaoDAO {
 
+    public static void criaTabela() throws FalhaConexaoException {
+        try {
+            // Estabelece conexao
+            Connection conexao = Conexao.obtemConexao();
+
+            // Faz a consulta
+            Statement stmt = conexao.createStatement();
+            stmt.execute("CREATE SCHEMA IF NOT EXISTS `coltec` DEFAULT CHARACTER SET utf8;");
+            stmt.execute("CREATE TABLE IF NOT EXISTS `coltec`.`sessao` (" +
+                    "`id` INT NOT NULL," +
+                    "`nomeSala` VARCHAR(255) NOT NULL," +
+                    "`data` DATETIME NOT NULL," +
+                    "`idFilme` INT NOT NULL," +
+                    "PRIMARY KEY (`id`)," +
+                    "FOREIGN KEY (`idFilme`) REFERENCES `coltec`.`filmes`(`id`)) ENGINE = InnoDB;");
+        } catch (SQLException e) {
+            throw new Error(e.getMessage());
+        }
+    }
+
     // Método para salvar uma sessão
-    public Sessao salvarSessao(Sessao sessao) {
+    public Sessao salvarSessao(Sessao sessao) throws FalhaConexaoException {
         String sql = "INSERT INTO sessoes (nomeSala, idFilme, dataSessao) VALUES (?, ?, ?)";
 
         try (Connection conn = Conexao.obtemConexao();
@@ -28,14 +49,13 @@
                 sessao.setId(rs.getInt(1));
             }
             return sessao;
-        } catch (SQLException e) {
-            System.err.println("Erro ao salvar sessão: " + e.getMessage());
-            return null;
+        } catch (SQLException | FalhaConexaoException e) {
+            throw new FalhaConexaoException("Erro ao salvar sessão.");
         }
     }
 
     // Método para buscar todas as sessões
-    public ArrayList<Sessao> buscarTodasSessoes() {
+    public ArrayList<Sessao> buscarTodasSessoes() throws FalhaConexaoException {
         String sql = "SELECT * FROM sessoes";
         ArrayList<Sessao> sessoes = new ArrayList<>();
 
@@ -44,19 +64,19 @@
              ResultSet rs = stmt.executeQuery(sql)) {
 
             while (rs.next()) {
-                Sala salaAssociada = new Sala(rs.getString("nomeSala"), 0); // Capacidade não disponível diretamente
-                Filme filmeExibido = new Filme(rs.getInt("idFilme"), "Placeholder", 0); // Detalhes adicionais devem ser buscados
+                Sala salaAssociada = new Sala(rs.getInt("idSala"), "sala 1", 100); // Capacidade não disponível diretamente
+                Filmes filmeExibido = new Filmes(rs.getInt("idFilme"), 230, "moana"); // Detalhes adicionais devem ser buscados
                 Date dataSessao = new Date(rs.getTimestamp("dataSessao").getTime());
                 sessoes.add(new Sessao(rs.getInt("id"), salaAssociada, filmeExibido, dataSessao));
             }
-        } catch (SQLException e) {
-            System.err.println("Erro ao buscar todas as sessões: " + e.getMessage());
+        } catch (SQLException | FalhaConexaoException e) {
+            throw new FalhaConexaoException("Erro ao buscar todas as sessões.");
         }
         return sessoes;
     }
 
     // Método para buscar sessões por filme
-    public ArrayList<Sessao> buscarSessoesPorFilme(Filme filme) {
+    public ArrayList<Sessao> buscarSessoesPorFilme(Filmes filme) throws FalhaConexaoException {
         String sql = "SELECT * FROM sessoes WHERE idFilme = ?";
         ArrayList<Sessao> sessoes = new ArrayList<>();
 
@@ -67,18 +87,18 @@
             ResultSet rs = stmt.executeQuery();
 
             while (rs.next()) {
-                Sala salaAssociada = new Sala(rs.getString("nomeSala"), 0); // Capacidade não disponível diretamente
+                Sala salaAssociada = new Sala(rs.getInt("idSala"), "nomeSala", 100); // Capacidade não disponível diretamente
                 Date dataSessao = new Date(rs.getTimestamp("dataSessao").getTime());
                 sessoes.add(new Sessao(rs.getInt("id"), salaAssociada, filme, dataSessao));
             }
-        } catch (SQLException e) {
-            System.err.println("Erro ao buscar sessões por filme: " + e.getMessage());
+        } catch (SQLException | FalhaConexaoException e) {
+            throw new FalhaConexaoException("Erro ao buscar sessões por filme.");
         }
         return sessoes;
     }
 
     // Método para atualizar uma sessão
-    public void atualizarSessao(Sessao sessao) {
+    public void atualizarSessao(Sessao sessao) throws FalhaConexaoException {
         String sql = "UPDATE sessoes SET nomeSala = ?, idFilme = ?, dataSessao = ? WHERE id = ?";
 
         try (Connection conn = Conexao.obtemConexao();
@@ -90,13 +110,13 @@
             stmt.setInt(4, sessao.getId());
             stmt.executeUpdate();
 
-        } catch (SQLException e) {
-            System.err.println("Erro ao atualizar sessão: " + e.getMessage());
+        } catch (SQLException | FalhaConexaoException e) {
+            throw new FalhaConexaoException("Erro ao atualizar sessão.");
         }
     }
 
     // Método para deletar uma sessão
-    public void deletarSessao(Sessao sessao) {
+    public void deletarSessao(Sessao sessao) throws FalhaConexaoException {
         String sql = "DELETE FROM sessoes WHERE id = ?";
 
         try (Connection conn = Conexao.obtemConexao();
@@ -105,8 +125,8 @@
             stmt.setInt(1, sessao.getId());
             stmt.executeUpdate();
 
-        } catch (SQLException e) {
-            System.err.println("Erro ao deletar sessão: " + e.getMessage());
+        } catch (SQLException | FalhaConexaoException e) {
+            throw new FalhaConexaoException("Erro ao deletar sessão.");
         }
     }
-}
+}
\ No newline at end of file
Index: Cinema/src/main/java/org/teiacoltec/poo/Classes/Sessao.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package org.teiacoltec.poo.Classes;\r\n\r\nimport org.teiacoltec.poo.ClassesDAO.SessaoDAO;\r\nimport org.teiacoltec.poo.Classes.Sala;\r\nimport org.teiacoltec.poo.Classes.Filmes;\r\n\r\nimport java.util.Date;\r\n\r\npublic class Sessao {\r\n    private int id;\r\n    private Sala salaAssociada;\r\n    private Filme filmeExibido;\r\n    private Date dataSessao;\r\n    private SessaoDAO sessaoDAO;\r\n\r\n    public Sessao(int id, Sala salaAssociada, Filme filmeExibido, Date dataSessao) {\r\n        this.id = id;\r\n        this.salaAssociada = salaAssociada;\r\n        this.filmeExibido = filmeExibido;\r\n        this.dataSessao = dataSessao;\r\n    }\r\n\r\n    @Override\r\n    public String toString() {\r\n        return \"ID: \" + this.id + '\\n' +\r\n               \"Sala: \" + this.salaAssociada.getNome() + '\\n' +\r\n               \"Filme: \" + this.filmeExibido.getNome() + '\\n' +\r\n               \"Data: \" + this.dataSessao;\r\n    }\r\n\r\n    //getters e setters\r\n    public int getId() {\r\n        return id;\r\n    }\r\n\r\n    public void setId(int id) {\r\n        this.id = id;\r\n    }\r\n\r\n    public Sala getSalaAssociada() {\r\n        return salaAssociada;\r\n    }\r\n\r\n    public Filme getFilmeExibido() {\r\n        return filmeExibido;\r\n    }\r\n\r\n    public Date getDataSessao() {\r\n        return dataSessao;\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Cinema/src/main/java/org/teiacoltec/poo/Classes/Sessao.java b/Cinema/src/main/java/org/teiacoltec/poo/Classes/Sessao.java
--- a/Cinema/src/main/java/org/teiacoltec/poo/Classes/Sessao.java	(revision 5d457233bd839ed54636d3bcd8406af8cf0dbe80)
+++ b/Cinema/src/main/java/org/teiacoltec/poo/Classes/Sessao.java	(date 1732484271715)
@@ -9,11 +9,11 @@
 public class Sessao {
     private int id;
     private Sala salaAssociada;
-    private Filme filmeExibido;
+    private Filmes filmeExibido;
     private Date dataSessao;
     private SessaoDAO sessaoDAO;
 
-    public Sessao(int id, Sala salaAssociada, Filme filmeExibido, Date dataSessao) {
+    public Sessao(int id, Sala salaAssociada, Filmes filmeExibido, Date dataSessao) {
         this.id = id;
         this.salaAssociada = salaAssociada;
         this.filmeExibido = filmeExibido;
@@ -41,7 +41,7 @@
         return salaAssociada;
     }
 
-    public Filme getFilmeExibido() {
+    public Filmes getFilmeExibido() {
         return filmeExibido;
     }
 
